BROKER SCHEMA Adapters

DECLARE ns NAMESPACE 'http://co/org/fsfb/fmwk';

---------------------------------------------------------------
--	MODULE FSFB_LISORMIN01UpdateDB
--	Este módulo actualiza las tablas de paso de LIS
--	Operación ORMIN
--	Tabla LABHSP_ADT
---------------------------------------------------------------
CREATE COMPUTE MODULE FSFB_LISORMIN01UpdateDB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		DECLARE msgin 				REFERENCE TO InputRoot.XMLNS.*:ACK_OUT;
		DECLARE messageidcontrol 	CHARACTER; --msgin.IDTRANSACCION ;
		DECLARE codigoerror			CHARACTER; --msgin.CODIGOERROR;
		DECLARE descripcion			CHARACTER; --msgin.DESCRIPCION;
		DECLARE error				CHARACTER; --msgin.ERROR;
		
		SET messageidcontrol = msgin.IDTRANSACCION ;
		SET codigoerror = msgin.CODIGOERROR ;
		SET descripcion = msgin.DESCRIPCION ;
		SET error = msgin.ERROR ;
		
		IF codigoerror = 'AA' THEN
			SET codigoerror = 'T';
			SET error = 'PROCESADO EXITOSO';
		ELSE
			SET codigoerror = 'E';
		END IF;
		
		PASSTHRU ('UPDATE ADMSALUD.LABHSP_ADT SET LABHSP_ADT.MSH_STATUS = ? WHERE LABHSP_ADT.PV1_VISITNR = ?',codigoerror, descripcion);
		--PASSTHRU ('UPDATE ADMSALUD.LABHSP_ADT SET LABHSP_ADT.MSH_STATUS = ? WHERE LABHSP_ADT.FEC_EVENTO = ?',codigoerror, messageidcontrol);
		--PASSTHRU ('UPDATE ADMSALUD.LABHSP_ADT SET LABHSP_ADT.MSH_STATUS = ?, LABHSP_ADT.MSG_ERROR = ? WHERE LABHSP_ADT.FEC_EVENTO = ? AND LABHSP_ADT.PV1_VISITNR = ?',codigoerror,error,messageidcontrol,descripcion); 
		
		RETURN FALSE;
	END;

END MODULE;

---------------------------------------------------------------
--	MODULE FSFB_LISORMIN02UpdateDB
--	Este módulo actualiza las tablas de paso de LIS
--	Operación ORMIN
--	Tabla TABADMAMBLABCORE
---------------------------------------------------------------
CREATE COMPUTE MODULE FSFB_LISORMIN02UpdateDB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		DECLARE msgin 				REFERENCE TO InputRoot.XMLNS.*:ACK_OUT;
		DECLARE messageidcontrol 	CHARACTER; --msgin.IDTRANSACCION ;
		DECLARE codigoerror			CHARACTER; --msgin.CODIGOERROR;
		DECLARE descripcion			CHARACTER; --msgin.DESCRIPCION;
		DECLARE error				CHARACTER; --msgin.ERROR;
		
		SET messageidcontrol = msgin.IDTRANSACCION ;
		SET codigoerror = msgin.CODIGOERROR ;
		SET descripcion = msgin.DESCRIPCION ;
		SET error = msgin.ERROR ;
		
		IF codigoerror = 'AA' THEN
			SET codigoerror = 'T';
			SET error = 'PROCESADO EXITOSO';
		ELSE
			SET codigoerror = 'E';
		END IF;
		
		PASSTHRU ('UPDATE ADMSALUD.TABADMAMBLABCORE SET TABADMAMBLABCORE.ESTADO = ? WHERE TABADMAMBLABCORE.PV1_VISITNR = ?', codigoerror, descripcion);
		--PASSTHRU ('UPDATE ADMSALUD.TABADMAMBLABCORE SET TABADMAMBLABCORE.ESTADO = ? WHERE TABADMAMBLABCORE.FEC_EVENTO = ?', codigoerror, messageidcontrol);
		--PASSTHRU ('UPDATE ADMSALUD.TABADMAMBLABCORE SET TABADMAMBLABCORE.ESTADO = ? WHERE TABADMAMBLABCORE.FEC_EVENTO = ?', codigoerror, messageidcontrol);
		
		RETURN FALSE;
	END;

END MODULE;

---------------------------------------------------------------
--	MODULE FSFB_LISORMIN03UpdateDB
--	Este módulo actualiza las tablas de paso de LIS
--	Operación ORMIN
--	Tabla TABADMCHKLABCORE
---------------------------------------------------------------
CREATE COMPUTE MODULE FSFB_LISORMIN03UpdateDB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		DECLARE msgin 				REFERENCE TO InputRoot.XMLNS.*:ACK_OUT;
		DECLARE messageidcontrol 	CHARACTER; --msgin.IDTRANSACCION ;
		DECLARE codigoerror			CHARACTER; --msgin.CODIGOERROR;
		DECLARE descripcion			CHARACTER; --msgin.DESCRIPCION;
		DECLARE error				CHARACTER; --msgin.ERROR;
		
		SET messageidcontrol = msgin.IDTRANSACCION ;
		SET codigoerror = msgin.CODIGOERROR ;
		SET descripcion = msgin.DESCRIPCION ;
		SET error = msgin.ERROR ;
		
		IF codigoerror = 'AA' THEN
			SET codigoerror = 'T';
			SET error = 'PROCESADO EXITOSO';
		ELSE
			SET codigoerror = 'E';
		END IF;
				
		PASSTHRU ('UPDATE ADMSALUD.TABADMCHKLABCORE SET TABADMCHKLABCORE.ESTADO =? WHERE TABADMCHKLABCORE.PV1_VISITNR =?', codigoerror, descripcion);
		
		RETURN FALSE;
		
	END;

END MODULE;

---------------------------------------------------------------
--	MODULE FSFB_LISORMINAdapterDB01_Involve
--	Este módulo adecua el mensaje entrante, proveniente de las
--	tablas de paso de LIS, al formato utilizado por el fmwk.
--	Operación ORM_IN
--	Tabla LABHSP_ADT
---------------------------------------------------------------
CREATE COMPUTE MODULE FSFB_LISORMINAdapterDB01_Involve
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		-- declaración de constantes	
		DECLARE operation 	CHARACTER 'ORM_IN_01';
		DECLARE system		CHARACTER 'LIS';
		-- propiedades para convertir a BLOB
		DECLARE parser		CHARACTER 'XMLNS';
		DECLARE msgset		CHARACTER 'FSFB_MessageSet';
		DECLARE msgtype		CHARACTER 'ORM_IN';
		DECLARE msgformat	CHARACTER 'XML';
		DECLARE msgblob		BLOB;
		
		-- construcción del mensaje de salida (xml)
		SET OutputRoot.Properties.MessageSet		= 'FSFB_MessageSet';
		
		-- construcción de cabecera MQMD
		CREATE FIELD OutputRoot.MQMD;
		
		SET OutputRoot.MQMD.Format					= 'DataObject';
		CALL UTILS.generateCorrelID() INTO OutputRoot.MQMD.CorrelId;
		
		-- construcción del mensaje FSFB
		CREATE FIELD OutputRoot.XMLNSC.ns:FSFB;
		DECLARE fsfb
			REFERENCE TO OutputRoot.XMLNSC.ns:FSFB;
		
		-- crear header del mensaje
		CALL UTILS.createHeader(fsfb, operation, system,'true','true');
		
		-- codificar el mensaje original	
		CALL UTILS.encodemsg(msgtype, msgset, msgformat, InputRoot.DataObject, msgblob); 
		
		-- crear body del mensaje
		CALL UTILS.createBody(fsfb, msgblob, parser, msgset, msgtype, msgformat);
		
		RETURN TRUE;
	END;

END MODULE;

---------------------------------------------------------------
--	MODULE FSFB_LISORMINAdapterDB02_Involve
--	Este módulo adecua el mensaje entrante, proveniente de las
--	tablas de paso de LIS, al formato utilizado por el fmwk.
--	Operación ORM_IN
--	Tabla TABADMAMBLABCORE
---------------------------------------------------------------
CREATE COMPUTE MODULE FSFB_LISORMINAdapterDB02_Involve
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		-- declaración de constantes	
		DECLARE operation 	CHARACTER 'ORM_IN_02';
		DECLARE system		CHARACTER 'LIS';
		-- propiedades para convertir a BLOB
		DECLARE parser		CHARACTER 'XMLNS';
		DECLARE msgset		CHARACTER 'FSFB_MessageSet';
		DECLARE msgtype		CHARACTER 'ORM_IN';
		DECLARE msgformat	CHARACTER 'XML';
		DECLARE msgblob		BLOB;
		
		-- construcción del mensaje de salida (xml)
		SET OutputRoot.Properties.MessageSet		= 'FSFB_MessageSet';
		
		-- construcción de cabecera MQMD
		CREATE FIELD OutputRoot.MQMD;
		
		SET OutputRoot.MQMD.Format					= 'DataObject';
		CALL UTILS.generateCorrelID() INTO OutputRoot.MQMD.CorrelId;
		
		-- construcción del mensaje FSFB
		CREATE FIELD OutputRoot.XMLNSC.ns:FSFB;
		DECLARE fsfb
			REFERENCE TO OutputRoot.XMLNSC.ns:FSFB;
		
		-- crear header del mensaje
		CALL UTILS.createHeader(fsfb, operation, system,'true','true');
		
		-- codificar el mensaje original	
		CALL UTILS.encodemsg(msgtype, msgset, msgformat, InputRoot.DataObject, msgblob); 
		
		-- crear body del mensaje
		CALL UTILS.createBody(fsfb, msgblob, parser, msgset, msgtype, msgformat);
		
		RETURN TRUE;
	END;

END MODULE;

---------------------------------------------------------------
--	MODULE FSFB_LISORMINAdapterDB03_Involve
--	Este módulo adecua el mensaje entrante, proveniente de las
--	tablas de paso de LIS, al formato utilizado por el fmwk.
--	Operación ORM_IN
--	Tabla LABHSP_ADT
---------------------------------------------------------------
CREATE COMPUTE MODULE FSFB_LISORMINAdapterDB03_Involve
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		-- declaración de constantes	
		DECLARE operation 	CHARACTER 'ORM_IN_03';
		DECLARE system		CHARACTER 'LIS';
		-- propiedades para convertir a BLOB
		DECLARE parser		CHARACTER 'XMLNS';
		DECLARE msgset		CHARACTER 'FSFB_MessageSet';
		DECLARE msgtype		CHARACTER 'ORM_IN';
		DECLARE msgformat	CHARACTER 'XML';
		DECLARE msgblob		BLOB;
		
		-- construcción del mensaje de salida (xml)
		SET OutputRoot.Properties.MessageSet		= 'FSFB_MessageSet';
		
		-- construcción de cabecera MQMD
		CREATE FIELD OutputRoot.MQMD;
		
		SET OutputRoot.MQMD.Format					= 'DataObject';
		CALL UTILS.generateCorrelID() INTO OutputRoot.MQMD.CorrelId;
		
		-- construcción del mensaje FSFB
		CREATE FIELD OutputRoot.XMLNSC.ns:FSFB;
		DECLARE fsfb
			REFERENCE TO OutputRoot.XMLNSC.ns:FSFB;
		
		-- crear header del mensaje
		CALL UTILS.createHeader(fsfb, operation, system,'true','true');
		
		-- codificar el mensaje original	
		CALL UTILS.encodemsg(msgtype, msgset, msgformat, InputRoot.DataObject, msgblob); 
		
		-- crear body del mensaje
		CALL UTILS.createBody(fsfb, msgblob, parser, msgset, msgtype, msgformat);
		
		RETURN TRUE;
	END;

END MODULE;