BROKER SCHEMA co.com.admin.services.db


CREATE COMPUTE MODULE GetLogsByTransaction_CmpCreateMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		/******************************************************/
		-- Copiar cabeceras de mensaje
		/******************************************************/
		SET OutputRoot.MQMD 	= InputRoot.MQMD;
		SET OutputRoot.MQRFH2 	= InputRoot.MQRFH2;
		
		/******************************************************/
		-- Declarar referencias
		/******************************************************/
		DECLARE refEnv REFERENCE TO Environment;
		DECLARE refMQRFH2 REFERENCE TO OutputRoot.MQRFH2;
		DECLARE refInpRoot REFERENCE TO OutputRoot;
		
		CALL common.procedures.utils.saveMQM(refInpRoot, refEnv);
		
		/******************************************************/
		-- Declarar referencia a objeto de entrada
		/******************************************************/
		DECLARE refInp REFERENCE TO InputRoot;
		IF refMQRFH2.usr.response.formatType = 'XMLNSC' THEN
			MOVE refInp LASTCHILD;
			MOVE refInp LASTCHILD;
		ELSE
			MOVE refInp LASTCHILD;
			MOVE refInp LASTCHILD;
			MOVE refInp LASTCHILD;
		END IF;
		
		/******************************************************/
		-- Ejecución de tarea
		/******************************************************/
		DECLARE resOperation, codeError CHARACTER '';
		DECLARE result ROW;
		DECLARE refResult REFERENCE TO result;
		CALL com.common.utils.dao.getLogByTransaction(refInp.Transaction.Id,refResult);
		
		IF EXISTS(refResult.Log.Main[]) THEN
			SET codeError = '0000';
		ELSE
			SET codeError = '700';	
		END IF;
		
		/******************************************************/
		-- Creación mensaje de respuesta
		/******************************************************/
		--Nombre de mensajes de respuesta
		DECLARE nmElementRs CHARACTER COALESCE(refMQRFH2.usr.response.WS.nmNode, 'ApplicationFault');
		
		/******************************************************/
		-- Declaración de namespaces propios de servicio
		/******************************************************/
		--Creación de mensaje de salida.
		DECLARE refOut REFERENCE TO OutputRoot;
		IF refMQRFH2.usr.response.formatType = 'XMLNSC' THEN
			DECLARE v1 NAMESPACE refMQRFH2.usr.response.WS.namespace.*:v1;
			CREATE FIELD OutputRoot.XMLNSC.v1:{nmElementRs};
			MOVE refOut TO OutputRoot.XMLNSC.v1:{nmElementRs};
		ELSE
			CREATE FIELD OutputRoot.JSON.Data.{nmElementRs};
			MOVE refOut TO OutputRoot.JSON.Data.{nmElementRs};			
		END IF;
		
		--Obtener mensaje de error desde base de datos
		DECLARE data ROW;
		DECLARE refObjError REFERENCE TO data.objError;
		CALL com.common.global.cache.getErrorHomologation(codeError, refObjError);
		
		SET refOut.ContextTransaction.IdTransaction 					= refMQRFH2.usr.contextTransaction.IdTransaction;
		SET refOut.ContextTransaction.CodeTransaction 					= refObjError.code;
		SET refOut.ContextTransaction.DescTransaction 					= refObjError.desc;
		SET refOut.ContextTransaction.ServerStatus.CodeTransaction 		= codeError;
		SET refOut.ContextTransaction.ServerStatus.DescTransaction 		= 'Acción Ejecutada';
		
		IF CAST(codeError AS INTEGER) = 0 THEN
			MOVE refResult LASTCHILD;
			
			SET refOut.TransactionInfo.Main.IdService 	= refResult.Main.FK_ID_SERVICE;
			SET refOut.TransactionInfo.Main.IdService 	= refResult.Main.ID_TRANSACTION;
			SET refOut.TransactionInfo.Main.IdService 	= refResult.Main.INIT_DATE;
			SET refOut.TransactionInfo.Main.IdService 	= refResult.Main.END_DATE;
			SET refOut.TransactionInfo.Main.IdService 	= refResult.Main.STATE_TRANSACTION;
			
			DECLARE i INTEGER 1;
			FOR refLog AS refResult.Details.Logs[] DO
				SET refOut.TransactionInfo.Details.Log[i].IdTransactionDetail 	= refLog.PK_ID_LOG_TRANSACTION_DETAIL;
				SET refOut.TransactionInfo.Details.Log[i].IdService 			= refLog.FK_ID_SERVICE;
				SET refOut.TransactionInfo.Details.Log[i].DateRegister 			= refLog.DATE_MESSAGE;
				SET refOut.TransactionInfo.Details.Log[i].TypeLog 				= refLog.TYPE_LOG;
				SET refOut.TransactionInfo.Details.Log[i].Message 				= cast(refLog.MESSAGE as CHARACTER CCSID 819);
				SET refOut.TransactionInfo.Details.Log[i].Component 			= refLog.COMPONENT;
				
				SET i = i+1;	
			END FOR;
			
			DECLARE j INTEGER 1;
			FOR refError AS refResult.Errors.Logs[] DO
				SET refOut.TransactionInfo.Errors.Log[j].Source 		= refError.SOURCE;
				SET refOut.TransactionInfo.Errors.Log[j].Trace 			= refError.TRACE;
				SET refOut.TransactionInfo.Errors.Log[j].ErrorDate 		= refError.ERROR_DATE;
				
				SET j = j+1;	
			END FOR;
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;
