CREATE COMPUTE MODULE envolveHL7FSFB_DFT
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- recuperar propiedades del mensaje de petici√≥n
		DECLARE envvar		REFERENCE TO Environment.Variables;
		
		-- construir mensaje FSFB de salida
		SET OutputRoot.MQMD			= InputRoot.MQMD;
		SET OutputRoot.Properties 	= InputRoot.Properties;
		SET OutputLocalEnvironment 	= InputLocalEnvironment;
		--SET OutputRoot = InputRoot;

		DECLARE msgin2 REFERENCE TO InputRoot.MRM;
		SET OutputRoot.MQMD.MsgId = LEFT(OutputRoot.MQMD.MsgId, LENGTH (InputRoot.MQMD.MsgId) - 5) || RIGHT(UUIDASBLOB, 5);		
		--DELETE FIELD msgin2.*:ORC;
		--DELETE FIELD msgin2.*:OBR;

		CREATE FIELD OutputRoot.XMLNSC.ns1:FSFB;
		DECLARE fsfb		REFERENCE TO OutputRoot.XMLNSC.ns1:FSFB;
		CREATE FIELD fsfb.ns1:Header;
		DECLARE headout		REFERENCE TO fsfb.ns1:Header;
		CREATE FIELD fsfb.ns1:Body;
		DECLARE bodyout		REFERENCE TO fsfb.ns1:Body;
		
		
		-- referenciar propiedades para decodificar mensaje
		DECLARE msgtype		CHARACTER envvar.body.parse.msgtype;
		DECLARE msgset 		CHARACTER envvar.body.parse.msgset;
		DECLARE msgformat	CHARACTER envvar.body.parse.msgformat;
		DECLARE msgblob		BLOB;
	
		-- codificar el mensaje de respuesta obtenido del servicio
		CALL UTILS.encodemsg(msgtype, msgset, msgformat, InputRoot.MRM, msgblob);
		
		-- construir mensaje de salida
		SET headout				= envvar.header;
		
		CREATE FIELD bodyout.parse;
		SET bodyout.parse		= envvar.body.parse;
		CREATE FIELD bodyout.data;
		SET bodyout.data		= msgblob;
		
		IF NOT EXISTS(InputLocalEnvironment.Destination.MQ.DestinationData[1].queueName[]) THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'RIS.ORMOUT.OUTPUT';
		END IF;
		
	END;
END MODULE;