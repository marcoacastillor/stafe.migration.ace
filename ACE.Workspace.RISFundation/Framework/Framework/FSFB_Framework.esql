BROKER SCHEMA Framework

DECLARE ns NAMESPACE 'http://co/org/fsfb/fmwk';

-- referencia a variables UDP
DECLARE colalog				EXTERNAL CHARACTER 'LOG.IN';
DECLARE colaaudit			EXTERNAL CHARACTER 'AUDIT.IN';

-----------------------------------------------
-- MODULE serviceTranslator
-- Módulo que se utiliza para obtener las 
-- características del archivo de propiedades
-- servicios.xml
-----------------------------------------------
CREATE COMPUTE MODULE serviceTranslator
	
	-- referencias al mensaje de entrada
	DECLARE msgin 		REFERENCE TO InputRoot.XMLNSC.ns:FSFB;
	DECLARE headerin	REFERENCE TO msgin.ns:Header;
	DECLARE bodyin		REFERENCE TO msgin.ns:Body;
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- referencias al mensaje de salida
		CALL CopyMessageHeaders();

		CREATE FIELD OutputRoot.XMLNSC.ns:FSFB;
		DECLARE msgout		REFERENCE TO OutputRoot.XMLNSC.ns:FSFB;
		CREATE FIELD msgout.ns:Header;
		DECLARE headerout	REFERENCE TO msgout.ns:Header;
		CREATE FIELD msgout.ns:Body;
		DECLARE bodyout		REFERENCE TO msgout.ns:Body;
		
		SET headerout 	= headerin;
		SET bodyout		= bodyin;
		
		-- obtener propiedades del servicio
		SET OutputLocalEnvironment.Variables.servicio[] 	= 
							SELECT srv.nombre, srv.log, srv.audit, srv.request, srv.response
								FROM InputLocalEnvironment.Variables.meta.XMLNSC.servicios.servicio[] AS srv 
									WHERE srv.nombre = FIELDVALUE(headerin.ns:operation) AND srv.sistema = FIELDVALUE(headerin.ns:system);
		
		-- escribirlas en el campo service
		SET headerout.ns:service.(XMLNSC.Attribute)nombre		= OutputLocalEnvironment.Variables.servicio[1].nombre;
		SET headerout.ns:service.(XMLNSC.Attribute)audit 		= OutputLocalEnvironment.Variables.servicio[1].audit;
		SET headerout.ns:service.(XMLNSC.Attribute)log			= OutputLocalEnvironment.Variables.servicio[1].log;
		
		SET headerout.ns:service.request		= OutputLocalEnvironment.Variables.servicio[1].request;
		SET headerout.ns:service.response		= OutputLocalEnvironment.Variables.servicio[1].response;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

-------------------------------------------------
-- MODULE REQ_serviceRoute
-- Módulo que se utiliza para enrutar el mensaje
-- de request del servicio según características
-- del archivo de configuración (servicios.xml)
--------------------------------------------------
CREATE COMPUTE MODULE REQ_serviceRoute
	-- referencias al mensaje de entrada
	DECLARE msgin 		REFERENCE TO InputRoot.XMLNSC.ns:FSFB;
	DECLARE headerin	REFERENCE TO msgin.ns:Header;
	DECLARE bodyin		REFERENCE TO msgin.ns:Body;
			
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- variables para decodificar mensaje de body : data
		DECLARE msgset		CHARACTER bodyin.parse.msgset;
		DECLARE msgtype		CHARACTER bodyin.parse.msgtype;
		DECLARE msgformat	CHARACTER bodyin.parse.msgformat;

		-- construcción del mensaje de salida
		CALL CopyMessageHeaders();
			
		-- enrutamiento mensaje de respaldo para correlacionar respuesta
		CREATE FIELD OutputRoot.XMLNSC.ns:FSFB;
		DECLARE msgout		REFERENCE TO OutputRoot.XMLNSC.ns:FSFB;
		
		CREATE FIELD msgout.ns:Header;	
		DECLARE headerout	REFERENCE TO msgout.ns:Header;
		
		SET headerout 		= headerin;
		
		CREATE FIELD msgout.ns:Body;
		DECLARE bodyout		REFERENCE TO msgout.ns:Body;
		
		SET bodyout			= bodyin;
		
		CREATE FIELD OutputLocalEnvironment.Destination.MQDestinationList;
		DECLARE destination	
			REFERENCE TO OutputLocalEnvironment.Destination.MQDestinationList;
		
		DECLARE cont INTEGER 0;
			
		-- propagar metadata del mensaje a la interface correspondiente
		SET cont = cont + 1;
		SET destination.DestinationData[cont].queueName = headerin.ns:service.request.queueName ;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

-------------------------------------------------
-- MODULE RES_serviceRoute
-- Módulo que se utiliza para enrutar el mensaje
-- de response del servicio según características
-- del archivo de configuración (servicios.xml)
--------------------------------------------------
CREATE COMPUTE MODULE RES_serviceRoute
	-- referencias al mensaje de entrada
	DECLARE msgin 		REFERENCE TO InputRoot.XMLNSC.ns:FSFB;
	DECLARE headerin	REFERENCE TO msgin.ns:Header;
	DECLARE bodyin		REFERENCE TO msgin.ns:Body;
			
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- variables para decodificar mensaje de body : data
		DECLARE msgset		CHARACTER bodyin.parse.msgset;
		DECLARE msgtype		CHARACTER bodyin.parse.msgtype;
		DECLARE msgformat	CHARACTER bodyin.parse.msgformat;

		-- construcción del mensaje de salida
		CALL CopyMessageHeaders();
			
		-- enrutamiento mensaje de respaldo para correlacionar respuesta
		CREATE FIELD OutputRoot.XMLNSC.ns:FSFB;
		DECLARE msgout		REFERENCE TO OutputRoot.XMLNSC.ns:FSFB;
		
		CREATE FIELD msgout.ns:Header;	
		DECLARE headerout	REFERENCE TO msgout.ns:Header;
		
		SET headerout 		= headerin;
		
		CREATE FIELD msgout.ns:Body;
		DECLARE bodyout		REFERENCE TO msgout.ns:Body;
		
		SET bodyout			= bodyin;
		
		CREATE FIELD OutputLocalEnvironment.Destination.MQDestinationList;
		DECLARE destination	
			REFERENCE TO OutputLocalEnvironment.Destination.MQDestinationList;
		
		DECLARE cont INTEGER 0;
		
		-- verificar flag de log
		IF CAST(headerout.ns:service.log AS BOOLEAN) THEN
			SET cont = cont + 1;
			SET  destination.DestinationData[cont].queueName = colalog ;
		END IF;	
		
		-- verificar flag de audit
		IF 	CAST(headerout.ns:service.audit AS BOOLEAN) THEN
			SET cont = cont + 1;
			SET  destination.DestinationData[cont].queueName = colaaudit;
		END IF;
		
		-- propagar metadata del mensaje a la interface correspondiente
		SET cont = cont + 1;
		SET destination.DestinationData[cont].queueName	= headerin.ns:service.response.queueName ;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
