BROKER SCHEMA Adapters

DECLARE ns NAMESPACE 'http://co/org/fsfb/fmwk';
DECLARE ns666 NAMESPACE 'http://co/org/fsfb/ACK_DFT_FEEDBACK_RIS/impl';

CREATE COMPUTE MODULE FSFB_AdapterDB_RIS_DFT_FEEDBACK_Update_Table
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE EXAMCODE CHARACTER InputRoot.XMLNS.*:AGFA_DFT_FEEDBACK_ACK.*:FT1_02_EXAM_CODE;
		DECLARE ACK_CODE CHARACTER InputRoot.XMLNS.*:AGFA_DFT_FEEDBACK_ACK.*:ACK_CODE;
		
		IF ACK_CODE = 'T' THEN
			PASSTHRU ('UPDATE ADMSALUD.AGFA_DFT SET AGFA_DFT.FT1_06_STATUS =? WHERE AGFA_DFT.FT1_02_EXAM_CODE=?','T','E'||EXAMCODE); --'T': Tratado
		ELSE
			PASSTHRU ('UPDATE ADMSALUD.AGFA_DFT SET AGFA_DFT.FT1_06_STATUS =? WHERE AGFA_DFT.FT1_02_EXAM_CODE=?','E','E'||EXAMCODE); --'E': Error
		END IF;
		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


---------------------------------------------------------------
--	MODULE FSFB_RISDFTFEEDBACKAdapterDB_Involve
--	Este módulo adecua el mensaje entrante, proveniente de las
--	tablas de paso de RIS, al formato utilizado por el fmwk.
--	Operación DFT_FEEDBACK
---------------------------------------------------------------
CREATE COMPUTE MODULE FSFB_RISDFTFEEDBACKAdapterDB_Involve
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		-- declaración de constantes	
		DECLARE operation 	CHARACTER 'DFTFEEDBACK';
		DECLARE system		CHARACTER 'RIS';
		-- propiedades para convertir a BLOB
		DECLARE parser		CHARACTER 'XMLNS';
		DECLARE msgset		CHARACTER 'FSFB_MessageSet';
		DECLARE msgtype		CHARACTER 'AGFA_DFT';
		DECLARE msgformat	CHARACTER 'XML';
		DECLARE msgblob		BLOB;
		
		-- construcción del mensaje de salida (xml)
		SET OutputRoot.Properties.MessageSet		= 'FSFB_MessageSet';
		
		-- construcción del mensaje de salida (xml)
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.CodedCharSetId = 819; 
		SET OutputRoot.Properties		= InputRoot.Properties;
		
		-- construcción de cabecera MQMD
		CREATE FIELD OutputRoot.MQMD;
		SET OutputRoot.MQMD.CodedCharSetId			= 850;
		
		SET OutputRoot.MQMD.Format					= 'DataObject';
		CALL UTILS.generateCorrelID() INTO OutputRoot.MQMD.CorrelId;
		
		-- construcción del mensaje FSFB
		CREATE FIELD OutputRoot.XMLNSC.ns:FSFB;
		DECLARE fsfb
			REFERENCE TO OutputRoot.XMLNSC.ns:FSFB;
		
		-- crear header del mensaje
		CALL UTILS.createHeader(fsfb, operation, system);
		
		-- codificar el mensaje original	
		CALL UTILS.encodemsg(msgtype, msgset, msgformat, InputRoot.DataObject, msgblob); 
		
		-- crear body del mensaje
		CALL UTILS.createBody(fsfb, msgblob, parser, msgset, msgtype, msgformat);
			
		RETURN TRUE;
	END;

END MODULE;