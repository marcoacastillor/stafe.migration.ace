BROKER SCHEMA MLLP






-- It wraps the message with the MLLP delimiters so that it can be sent to the destined Application over MLLP
CREATE COMPUTE MODULE AddMLLPBytes_Compute
	DECLARE LeadingMLLPBytes EXTERNAL CHARACTER '0B';
	DECLARE TrailingMLLPBytes EXTERNAL CHARACTER '1C0D';
	DECLARE AddLeadingMLLPBytes EXTERNAL BOOLEAN TRUE;
	DECLARE AddTrailingMLLPBytes EXTERNAL BOOLEAN TRUE;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE InputBlob REFERENCE TO InputRoot.BLOB.BLOB;
		SET OutputRoot = InputRoot;

		-- If AddLeadingMLLPBytes is enabled then add LeadingMLLPBytes		
		IF ( AddLeadingMLLPBytes ) THEN
			-- Convert LeadingMLLPBytes to its BLOB format
			DECLARE LeadingMLLPBLOB BLOB CAST ( LeadingMLLPBytes AS BLOB );
			-- Checking whether the message has Leading MLLP Bytes
			-- If yes then propagate the message to 'Out' terminal, unchanged
			DECLARE LeadingPosition INTEGER;
			SET	LeadingPosition = POSITION ( LeadingMLLPBLOB IN InputBlob ); 
			
			IF ( LeadingPosition <> 1 ) THEN
		        -- Message does not contain LeadingMLLPBytes hence adding the same
				SET OutputRoot.BLOB.BLOB = LeadingMLLPBLOB || OutputRoot.BLOB.BLOB;
	        END IF;
	    END IF;
		
		-- If AddTrailingMLLPBytes is enabled then add TrailingMLLPBytes	
		IF ( AddTrailingMLLPBytes ) THEN
			-- Convert TrailingMLLPBytes to its BLOB format
			DECLARE TrailingMLLPBLOB BLOB CAST ( TrailingMLLPBytes AS BLOB );
			-- Checking whether the message has Trailing MLLP Bytes
			-- If yes then propagate the message to 'Out' terminal, unchanged
			DECLARE TrailingPosition INTEGER POSITION ( TrailingMLLPBLOB IN InputBlob );
			DECLARE TrailingBytesLength INTEGER LENGTH ( TrailingMLLPBLOB );
			DECLARE MessageLength INTEGER LENGTH ( InputBlob );
			DECLARE ActualPosition INTEGER ( MessageLength - TrailingBytesLength ) + 1;
						
			IF ( TrailingPosition <> ActualPosition ) THEN
		        -- Message does not contain TrailingMLLPBytes hence adding the same
				SET OutputRoot.BLOB.BLOB =  OutputRoot.BLOB.BLOB || TrailingMLLPBLOB;
	        END IF;
		END IF;
		RETURN TRUE;
	END;
END MODULE;
