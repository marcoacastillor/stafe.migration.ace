CREATE DATABASEEVENT MODULE ORM_IN_Database_TABADMAMBLABCORE

	/*
	 * ReadEvents populates the NewEvents structure with event data read from the event table.
	 * ReadEvents is called after all current events have been dispatched.
	 * ReadEvents is called on a new transaction that is a separate transaction from the message
	 * flow, and that runs before the message flow transaction.
	 *
	 * After ReadEvents completes:
	 * - the current transaction is committed to ensure that any database locks obtained during
	 *   ReadEvents are released.
	 * - All events in NewEvents are moved to Ready state.  This means that they are ready to be
	 *   dispatched.
	 *
	 * Parameters:
	 * IN NewEvents REFERENCE.  This is a reference to a ROW. ReadEvents must create children of
	 *                          this ROW for each event that is being processed.
	 *                          Each child must include a Usr field and a Key field.
	 */
	 CREATE PROCEDURE ReadEvents( IN NewEvents REFERENCE )
	 BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('ReadEvents');
		END;

		/*
		 * Here you select all unprocessed events from the event store.
		 * You only read the events here; you delete them in EndEvent.
		 * In general, it is not good practice to delete or update the events here because this
		 * transaction will be committed even before the BuildMessage procedure is called.
		 * Under certain circumstances, for example, if you do not need assured delivery of the
		 * events, it is acceptable to update or delete the events here. This means that
		 * the deletion or update is committed before the message flow processes the in-memory
		 * copies of these events. If the broker, execution group, or message flow is stopped
		 * or redeployed in the meantime, the in-memory copy is lost, and the events are never
		 * processed by the flow.
		 *
		 * NOTE: You do not need to filter out events that are currently dispatched here.
		 *       The framework ensures that events are not duplicated by comparing the Key field
		 *       to the Key field of dispatched events.
		 */

		/* For example*/
--		SET NewEvents.Event[] = SELECT <MyEventTableName>.* AS Usr,
--									<MyEventTableName>.<MyEventTablePrimaryKey> AS Key
--									FROM Database.<MySchemaName>.<MyEventTableName>;

		/*
		 * Optionally, if your event table has a column to store state (events are not removed from
		 * the table after processing), use the WHERE clause to filter the events.
		 */
			SET NewEvents.Event[] = SELECT TABADMAMBLABCORE.* AS Usr,
									TABADMAMBLABCORE.PV1_VISITNR AS Key
	  								FROM Database.admsalud.TABADMAMBLABCORE
  									WHERE TABADMAMBLABCORE.estado = 'N' AND NOT(TABADMAMBLABCORE.PV1_VISITNR LIKE 'OA%');
	END;


	/*
	 * BuildMessage builds the message to be propagated to the flow.
	 * Typically, you use the event data for the current dispatched event to look up data in
	 * the application table, and copy that data into the message.
	 * BuildMessage is called while some events are in the Ready state.
	 * BuildMessage is called as part of the message flow transaction. This transaction also
	 * involves EndEvent.
	 *
	 * After BuildMessage returns, the message is propagated to the message flow.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the
	 *                                current dispatched event. This is a copy of one of the 
	 *                                events added to NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE BuildMessage(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('BuildMessage');
		END;
		/* Here you use the event data in the local environment to retrieve the application data. */

		/* For example */
		SET Root.DataObject.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Encoding = 'iso-8859-1';
		SET Root.DataObject.ns23:ORM_IN [] =
				SELECT TABADMAMBLABCORE.ESTADO as ESTADO, 
				TABADMAMBLABCORE.TIPO_REGISTRO as TIPO_REGISTRO, 
				TABADMAMBLABCORE.FEC_EVENTO as FEC_EVENTO,
				TABADMAMBLABCORE.PAC_PAC_RUT as PAC_PAC_RUT, 
				TABADMAMBLABCORE.PAC_PAC_TIPOIDENT as PAC_PAC_TIPOIDENT, 
				TRUNCATE (TABADMAMBLABCORE.PAC_PAC_NUMERO,0) as PAC_PAC_NUMERO,
				TRIM (TABADMAMBLABCORE.PAC_PAC_APELLPATER) as PAC_PAC_APELLPATER, 
				TRIM(TABADMAMBLABCORE.PAC_PAC_APELLMATER) as PAC_PAC_APELLMATER, 
				TRIM(TABADMAMBLABCORE.PAC_PAC_NOMBRE) as PAC_PAC_NOMBRE,
				TABADMAMBLABCORE.PAC_PAC_FECHANACIM as PAC_PAC_FECHANACIM, 
				TABADMAMBLABCORE.PAC_PAC_SEXO as PAC_PAC_SEXO, 
				TRIM(TABADMAMBLABCORE.PAC_PAC_DIRECCIONGRALHABIT) as PAC_PAC_DIRECCIONGRALHABIT,
				TABADMAMBLABCORE.PAC_PAC_REGIOHABIT as PAC_PAC_REGIOHABIT, 
				TABADMAMBLABCORE.PAC_PAC_FONO as PAC_PAC_FONO, 
				TABADMAMBLABCORE.PAC_PAC_ESTADCIVIL as PAC_PAC_ESTADCIVIL, 
				'CO' as PID_NATIONALITY, 
				'1900-01-01T00:00:00' as PID_DOD, 
				TABADMAMBLABCORE.PV1_STATUS as PV1_STATUS,  
				TABADMAMBLABCORE.PV1_LOCATION as PV1_LOCATION, 
				' ' AS PV1_ROOM, 
				' ' AS PV1_BED, 
				TABADMAMBLABCORE.PV1_ADMTYPE as PV1_ADMTYPE, 
				TABADMAMBLABCORE.XSER_PRO_RUT as XSER_PRO_RUT,
				TABADMAMBLABCORE.PV1_VISITNR as PV1_VISITNR, 
				TABADMAMBLABCORE.PV1_ADMITDATE as PV1_ADMITDATE, 
				'19000101000000' AS PV1_DISCHARGEDATE, 
				TABADMAMBLABCORE.DIA_DIA_CODIGO as DIA_DIA_CODIGO, 
				TABADMAMBLABCORE.DIA_DIA_DESCRIPCIO as DIA_DIA_DESCRIPCIO,
				TABADMAMBLABCORE.SEGMENT_OBR as SEGMENT_OBR, 
				TABADMAMBLABCORE.SER_PRO_CUENTA as SER_PRO_CUENTA, 
				TABADMAMBLABCORE.DONURL as DONURL, 
				TABADMAMBLABCORE.FEC_NACIM as FEC_NACIM, 
				TABADMAMBLABCORE.CHKCON as CHKCON, 
				TABADMAMBLABCORE.CHECKED as CHECKED, 
				TABADMAMBLABCORE.CON_CON_CODIGO as CON_CON_CODIGO, 
				TABADMAMBLABCORE.CON_CON_DESCRIPCIO as CON_CON_DESCRIPCIO, 
				TABADMAMBLABCORE.XCODIGOCENTROATEN as XCODIGOCENTROATEN, 
				TABADMAMBLABCORE.SER_PRO_NOMBREFULL as SER_PRO_NOMBREFULL, 
				TABADMAMBLABCORE.IPORIGEN AS IPORIGEN,
				TABADMAMBLABCORE.TAB_TIPOIDENTGLOSA as TAB_TIPOIDENTGLOSA, 
				TABADMAMBLABCORE.HOST_ORIGEN as HOST_ORIGEN, 
				' ' AS SER_PRO_ATIENDEORDEN, 
				TABADMAMBLABCORE.USRCOD as RUT_ATIENDE, 
				TABADMAMBLABCORE.FEC_EVENTO as FEC_EVENTO, 
				TABADMAMBLABCORE.ORDERCONTROL as ORDERCONTROL, 
				TABADMAMBLABCORE.ORDERSTATUS as ORDERSTATUS/*, ' ' as ORDOBSERVACION*/
        		FROM Database.admsalud.TABADMAMBLABCORE
					WHERE TABADMAMBLABCORE.PV1_VISITNR = DispatchedEvent.Usr.PV1_VISITNR AND TABADMAMBLABCORE.FEC_EVENTO = DispatchedEvent.Usr.FEC_EVENTO;
				SET Root.DataObject.ns23:ORM_IN [1].APLDESTINO = 'LIS';		

		RETURN;
	END;


	/*
	 * EndEvent updates the event table to record the event as processed.
	 * EndEvent is called after the message flow has processed the event.
	 * EndEvent is called as part of the message flow transaction.  This transaction also involves
	 * BuildMessage. The transaction will be committed when this procedure ends.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the current
	 *                                dispatched event. This is a copy of one of the events added to
	 *                                NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE EndEvent(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('EndEvent');

		END;
		/* Here you update the event table to ensure that this event is not processed again. */

		/* For example */
--		DELETE FROM  Database.<MySchemaName>.<MyEventTableName>
--				WHERE <MyEventTableName>.<MyEventTablePrimaryKey> = DispatchedEvent.Usr.<MyEventTablePrimaryKey>;

		/* Optionally, if your event table has a column to store state, you can update the events here. */
	   UPDATE Database.admsalud.TABADMAMBLABCORE
				SET estado = 'P'
				WHERE TABADMAMBLABCORE.PV1_VISITNR = DispatchedEvent.Usr.PV1_VISITNR AND TABADMAMBLABCORE.FEC_EVENTO = DispatchedEvent.Usr.FEC_EVENTO;
				
		RETURN;
	END;


	CREATE PROCEDURE HandleDatabaseError( IN FunctionName CHARACTER )
	BEGIN
		/* Throw a different exception; this could be changed. */
		DECLARE message CHARACTER 'Exception occured calling Database Input Node function: ' || FunctionName;
		THROW USER EXCEPTION VALUES( SQLCODE, SQLSTATE, SQLNATIVEERROR, SQLERRORTEXT, message );
	END;

END MODULE;