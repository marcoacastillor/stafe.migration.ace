BROKER SCHEMA Adapters


DECLARE ns23 NAMESPACE 'http://co/org/fsfb/HIS_ORMInTable/impl';

CREATE DATABASEEVENT MODULE ORM_IN_Database_TABADMCHKLABCORE


	 CREATE PROCEDURE ReadEvents( IN NewEvents REFERENCE )
	 BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			
		END;

	
                 SET NewEvents.Event[] = SELECT TABADMCHKLABCORE.* AS Usr,
									TABADMCHKLABCORE.PV1_VISITNR AS Key
								    FROM Database.admsalud.TABADMCHKLABCORE
									WHERE TABADMCHKLABCORE.estado = 'N';
	END;



	CREATE PROCEDURE BuildMessage(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

		END;
		/* Here you use the event data in the local environment to retrieve the application data. */
        -- SET OutputRoot.XMLNS.message.(XML.NamespaceDecl)xmlns:space1 = 'http://www.ibm.com/space1';
        SET Root.DataObject.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Encoding = 'iso-8859-1';
	    SET Root.DataObject.ns23:ORM_IN [] =
				SELECT TABADMCHKLABCORE.ESTADO as ESTADO, 
				TABADMCHKLABCORE.TIPO_REGISTRO as TIPO_REGISTRO, 
				TABADMCHKLABCORE.FEC_EVENTO as FEC_EVENTO,
				TRIM (TABADMCHKLABCORE.PAC_PAC_RUT) as PAC_PAC_RUT, 
				TABADMCHKLABCORE.PAC_PAC_TIPOIDENT as PAC_PAC_TIPOIDENT, 
				TRUNCATE (TABADMCHKLABCORE.PAC_PAC_NUMERO,0) as PAC_PAC_NUMERO,
				TRIM (TABADMCHKLABCORE.PAC_PAC_APELLPATER) as PAC_PAC_APELLPATER, 
				TRIM(TABADMCHKLABCORE.PAC_PAC_APELLMATER) as PAC_PAC_APELLMATER, 
				TRIM(TABADMCHKLABCORE.PAC_PAC_NOMBRE) as PAC_PAC_NOMBRE,
				TABADMCHKLABCORE.PAC_PAC_FECHANACIM as PAC_PAC_FECHANACIM, 
				TABADMCHKLABCORE.PAC_PAC_SEXO as PAC_PAC_SEXO, 
				TRIM(TABADMCHKLABCORE.PAC_PAC_DIRECCIONGRALHABIT) as PAC_PAC_DIRECCIONGRALHABIT,
				TABADMCHKLABCORE.PAC_PAC_REGIOHABIT as PAC_PAC_REGIOHABIT, 
				TABADMCHKLABCORE.PAC_PAC_FONO as PAC_PAC_FONO, 
				TABADMCHKLABCORE.PAC_PAC_ESTADCIVIL as PAC_PAC_ESTADCIVIL, 
				'CO' as PID_NATIONALITY, '1900-01-01T00:00:00' as PID_DOD, 
				TABADMCHKLABCORE.PV1_STATUS as PV1_STATUS,  
				TABADMCHKLABCORE.PV1_LOCATION as PV1_LOCATION, 
				' ' AS PV1_ROOM, 
				' ' AS PV1_BED, 
				TABADMCHKLABCORE.PV1_ADMTYPE as PV1_ADMTYPE, 
				TABADMCHKLABCORE.XSER_PRO_RUT as XSER_PRO_RUT,
				TABADMCHKLABCORE.PV1_VISITNR as PV1_VISITNR, 
				TABADMCHKLABCORE.PV1_ADMITDATE as PV1_ADMITDATE, 
				'19000101000000' AS PV1_DISCHARGEDATE, 
				TABADMCHKLABCORE.DIA_DIA_CODIGO as DIA_DIA_CODIGO, 
				TABADMCHKLABCORE.DIA_DIA_DESCRIPCIO as DIA_DIA_DESCRIPCIO,
				TABADMCHKLABCORE.SEGMENT_OBR as SEGMENT_OBR, 
				TABADMCHKLABCORE.SER_PRO_CUENTA as SER_PRO_CUENTA, 
				TABADMCHKLABCORE.DONURL as DONURL, 
				TABADMCHKLABCORE.FEC_NACIM as FEC_NACIM, 
				TABADMCHKLABCORE.CHKCON as CHKCON, 
				TABADMCHKLABCORE.CHECKED as CHECKED,
				TABADMCHKLABCORE.CON_CON_CODIGO as CON_CON_CODIGO, 
				TABADMCHKLABCORE.CON_CON_DESCRIPCIO as CON_CON_DESCRIPCIO, 
				TABADMCHKLABCORE.XCODIGOCENTROATEN as XCODIGOCENTROATEN, 
				TABADMCHKLABCORE.SER_PRO_NOMBREFULL as SER_PRO_NOMBREFULL, 
				TABADMCHKLABCORE.IPORIGEN AS IPORIGEN,
				TABADMCHKLABCORE.TAB_TIPOIDENTGLOSA as TAB_TIPOIDENTGLOSA, 
				TABADMCHKLABCORE.HOST_ORIGEN as HOST_ORIGEN, 
				' ' AS SER_PRO_ATIENDEORDEN, 
				TABADMCHKLABCORE.USRCOD as RUT_ATIENDE, 
				TABADMCHKLABCORE.FEC_EVENTO as FEC_EVENTO, 
				TABADMCHKLABCORE.ORDERCONTROL as ORDERCONTROL, 
				TABADMCHKLABCORE.ORDERSTATUS as ORDERSTATUS /*' ' as ORDOBSERVACION  ESTE CAMPO NO SE ENCUENTRA EN MODELO HL7*/
				
        		FROM Database.admsalud.TABADMCHKLABCORE
					WHERE TABADMCHKLABCORE.PV1_VISITNR = DispatchedEvent.Usr.PV1_VISITNR AND TABADMCHKLABCORE.FEC_EVENTO = DispatchedEvent.Usr.FEC_EVENTO;
				SET Root.DataObject.ns23:ORM_IN [1].APLDESTINO = 'LIS';	

		RETURN;
	END;


	
	CREATE PROCEDURE EndEvent(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */


		END;
	

		  UPDATE Database.admsalud.TABADMCHKLABCORE
				 SET estado = 'P'
				 WHERE TABADMCHKLABCORE.PV1_VISITNR = DispatchedEvent.Usr.PV1_VISITNR AND TABADMCHKLABCORE.FEC_EVENTO = DispatchedEvent.Usr.FEC_EVENTO;
		RETURN;
	END;


	CREATE PROCEDURE HandleDatabaseError( IN FunctionName CHARACTER )
	BEGIN
		/* Throw a different exception; this could be changed. */
		DECLARE message CHARACTER 'Exception occured calling Database Input Node function: ' || FunctionName;
		THROW USER EXCEPTION VALUES( SQLCODE, SQLSTATE, SQLNATIVEERROR, SQLERRORTEXT, message );
	END;

END MODULE;

/*
 * This DatabaseEvent module implements the ESQL code invoked from a DatabaseInput node to handle
 * events as they move through the states of New->Ready->Dispatched->Complete.
 *
 * NOTE: Events that result in unhandled exceptions in the message flow are moved to the Failed
 * state. "Unhandled" means either that the catch terminal was not wired, or that the catch
 * terminal threw an exception.  If an exception is unhandled, the transaction is rolled back.
 * If the exception is handled, even if it is handled on the catch terminal, the transaction is
 * committed.
 *
 * Events are moved to the Failed state after rollback (or after a number of retries, depending 
 * on the settings on the Retry panel).  Events in the Failed state are propagated to the Failure
 * terminal.  If they are not handled on the failure terminal, they are discarded.  They are
 * still in the EventTable, and so are not lost.
 *
 * If you are using a database table as your event store, you can convert this template to deployable
 * code by replacing the substitution strings. Substitution strings in this module are enclosed by
 * < and > characters.
 * The following substitution strings are used:
 *   <MySchemaName>                 - the database schema name.
 *   <MyEventTableName>             - the database table used as your event store.
 *   <MyEventTablePrimaryKey>       - the primary key of the database table used as the event store.
 *   <MyStatusColumnName>           - the name of a column, if you update a column in the event table
 *                                    to indicate that the event has been processed.
 *                                    If you delete events from the event table after processing, you
 *                                    do not need <MyStatusColumnName>.
 *   <MyNewEventStatusValue>        - the value written to the status column when the event is first
 *                                    added. You need this only if you use <MyStatusColumnName>.
 *   <MyProcessedEventStatusValue>  - the value written to the status column after the event has been
 *                                    processed. You need this only if you use <MyStatusColumnName>.
 *   <MyApplicationTableName>       - the name of the table that includes the changed data to be processed
 *                                    by the DatabaseInput node.
 *   <MyEventTableForeignKey>       - the column in the event table that references the row in the application
 *                                    table containing the changed data to be processed by the DatabaseInput
 *                                    node. This is typically the primary key of the application table.
 *   <MyApplicationTablePrimaryKey> - the primary key of the database table used as the application table.
 * When you have finished editing the ESQL, set the data source and ESQL module properties on the basic tab
 * of this node.
 */
CREATE DATABASEEVENT MODULE ORM_IN_Database_LABHSP_ADT

	/*
	 * ReadEvents populates the NewEvents structure with event data read from the event table.
	 * ReadEvents is called after all current events have been dispatched.
	 * ReadEvents is called on a new transaction that is a separate transaction from the message
	 * flow, and that runs before the message flow transaction.
	 *
	 * After ReadEvents completes:
	 * - the current transaction is committed to ensure that any database locks obtained during
	 *   ReadEvents are released.
	 * - All events in NewEvents are moved to Ready state.  This means that they are ready to be
	 *   dispatched.
	 *
	 * Parameters:
	 * IN NewEvents REFERENCE.  This is a reference to a ROW. ReadEvents must create children of
	 *                          this ROW for each event that is being processed.
	 *                          Each child must include a Usr field and a Key field.
	 */
	 CREATE PROCEDURE ReadEvents( IN NewEvents REFERENCE )
	 BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('ReadEvents');
		END;

		/*
		 * Here you select all unprocessed events from the event store.
		 * You only read the events here; you delete them in EndEvent.
		 * In general, it is not good practice to delete or update the events here because this
		 * transaction will be committed even before the BuildMessage procedure is called.
		 * Under certain circumstances, for example, if you do not need assured delivery of the
		 * events, it is acceptable to update or delete the events here. This means that
		 * the deletion or update is committed before the message flow processes the in-memory
		 * copies of these events. If the broker, execution group, or message flow is stopped
		 * or redeployed in the meantime, the in-memory copy is lost, and the events are never
		 * processed by the flow.
		 *
		 * NOTE: You do not need to filter out events that are currently dispatched here.
		 *       The framework ensures that events are not duplicated by comparing the Key field
		 *       to the Key field of dispatched events.
		 */

		/* For example*/
--		SET NewEvents.Event[] = SELECT <MyEventTableName>.* AS Usr,
--									<MyEventTableName>.<MyEventTablePrimaryKey> AS Key
--									FROM Database.<MySchemaName>.<MyEventTableName>;

		/*
		 * Optionally, if your event table has a column to store state (events are not removed from
		 * the table after processing), use the WHERE clause to filter the events.
		 PASSTHRU('
									SELECT LABHSP_ADT.*,
									LABHSP_ADT.PV1_VISITNR AS Key
									FROM admsalud.LABHSP_ADT
									WHERE LABHSP_ADT.MSH_STATUS = ?
					                ORDER BY LABHSP_ADT.FEC_EVENTO','N');
		 */
		 SET NewEvents.Event[] = SELECT LABHSP_ADT.* AS Usr,
								LABHSP_ADT.PV1_VISITNR AS Key
								FROM Database.admsalud.LABHSP_ADT
								WHERE LABHSP_ADT.MSH_STATUS = 'N' AND (LABHSP_ADT.PV1_VISITNR LIKE 'IL%' OR  LABHSP_ADT.PV1_VISITNR LIKE 'TL%');
	END;


	/*
	 * BuildMessage builds the message to be propagated to the flow.
	 * Typically, you use the event data for the current dispatched event to look up data in
	 * the application table, and copy that data into the message.
	 * BuildMessage is called while some events are in the Ready state.
	 * BuildMessage is called as part of the message flow transaction. This transaction also
	 * involves EndEvent.
	 *
	 * After BuildMessage returns, the message is propagated to the message flow.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the
	 *                                current dispatched event. This is a copy of one of the 
	 *                                events added to NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE BuildMessage(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('BuildMessage');
		END;
		/* Here you use the event data in the local environment to retrieve the application data. */

		--SET Root.DataObject.ns:LABHSP_ADT [] =
		
		-- SET output.hl7:"AIP.7.StartDateTimeOffset" VALUE = input.hl7:StartDateTimeOffset;
		
		SET Root.DataObject.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Encoding = 'iso-8859-1';
		SET Root.DataObject.ns23:ORM_IN [] =
				SELECT LABHSP_ADT.MSH_STATUS as ESTADO, 
					   LABHSP_ADT.EVN_TYPECODE as TIPO_REGISTRO, 
					   LABHSP_ADT.EVN_RECDATE as FEC_EVENTO,
				       LABHSP_ADT.PID_ID  as PAC_PAC_RUT, 
				       LABHSP_ADT.PID_TIPOIDENT as PAC_PAC_TIPOIDENT, 
				       LABHSP_ADT.PID_ID2 as PAC_PAC_NUMERO,
				       LABHSP_ADT.PID_LNAMEF as PAC_PAC_APELLPATER, 
				       LABHSP_ADT.PID_LNAMEM as PAC_PAC_APELLMATER, 
				       LABHSP_ADT.PID_FNAME as PAC_PAC_NOMBRE,
				       LABHSP_ADT.PID_DOB as PAC_PAC_FECHANACIM, 
				       LABHSP_ADT.PID_SEX as PAC_PAC_SEXO, 
				       LABHSP_ADT.PID_STREET as PAC_PAC_DIRECCIONGRALHABIT,
				       LABHSP_ADT.PID_REGION as PAC_PAC_REGIOHABIT, 
				       LABHSP_ADT.PID_PHONE as PAC_PAC_FONO, 
				       LABHSP_ADT.PID_MARITSTAT as PAC_PAC_ESTADCIVIL,
				       LABHSP_ADT.PID_NATIONALITY as PID_NATIONALITY, 
				       LABHSP_ADT.PID_DOD as PID_DOD, 
				       LABHSP_ADT.PV1_STATUS as PV1_STATUS,
				       LABHSP_ADT.PV1_LOCATION as PV1_LOCATION, 
				       LABHSP_ADT.PV1_ROOM as PV1_ROOM, 
				       LABHSP_ADT.PV1_BED as PV1_BED, 
				       LABHSP_ADT.PV1_ADMTYPE as PV1_ADMTYPE,
				       LABHSP_ADT.PV1_ATTDOC as XSER_PRO_RUT, 
				       LABHSP_ADT.PV1_VISITNR as PV1_VISITNR, 
				       LABHSP_ADT.PV1_ADMITDATE as PV1_ADMITDATE,
				       LABHSP_ADT.PV1_DISCHARGEDATE as PV1_DISCHARGEDATE, 
				       LABHSP_ADT.DIA_DIA_CODIGO as DIA_DIA_CODIGO, 
				       LABHSP_ADT.DIA_DIA_DESCRIPCIO as DIA_DIA_DESCRIPCIO,
				       LABHSP_ADT.SEGMENT_OBR as SEGMENT_OBR, 
				       LABHSP_ADT.SER_PRO_CUENTA as SER_PRO_CUENTA, 
				       LABHSP_ADT.DONURL as DONURL, 
				       LABHSP_ADT.FEC_NACIM as FEC_NACIM,
				       LABHSP_ADT.CHKCON as CHKCON, 
				       '' as CHECKED, 
				       LABHSP_ADT.CON_CON_CODIGO as CON_CON_CODIGO, 
				       LABHSP_ADT.CON_CON_DESCRIPCIO as CON_CON_DESCRIPCIO, 
				       LABHSP_ADT.XCODIGOCENTROATEN as XCODIGOCENTROATEN, 
				       LABHSP_ADT.SER_PRO_NOMBREFULL as SER_PRO_NOMBREFULL, 
				       LABHSP_ADT.IPORIGEN as IPORIGEN,
				       LABHSP_ADT.TAB_TIPOIDENTGLOSA as TAB_TIPOIDENTGLOSA, 
				       LABHSP_ADT.HOST_ORIGEN as HOST_ORIGEN, 
				       LABHSP_ADT.SER_PRO_ATIENDEORDEN as SER_PRO_ATIENDEORDEN,
				       LABHSP_ADT.RUT_ATIENDE as RUT_ATIENDE, 
				       LABHSP_ADT.FEC_EVENTO as FEC_EVENTO, 
				       LABHSP_ADT.ORDERCONTROL as ORDERCONTROL,
				       LABHSP_ADT.ORDERSTATUS as ORDERSTATUS/*, LABHSP_ADT.ORDOBSERVACION as ORDOBSERVACION*/
						FROM Database.admsalud.LABHSP_ADT 
					    WHERE LABHSP_ADT.PV1_VISITNR = DispatchedEvent.Usr.PV1_VISITNR AND LABHSP_ADT.FEC_EVENTO = DispatchedEvent.Usr.FEC_EVENTO AND LABHSP_ADT.MSH_LAB_ID = DispatchedEvent.Usr.MSH_LAB_ID;                
        SET Root.DataObject.ns23:ORM_IN [1].APLDESTINO = 'LIS';					    

		RETURN;
	END;


	/*
	 * EndEvent updates the event table to record the event as processed.
	 * EndEvent is called after the message flow has processed the event.
	 * EndEvent is called as part of the message flow transaction.  This transaction also involves
	 * BuildMessage. The transaction will be committed when this procedure ends.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the current
	 *                                dispatched event. This is a copy of one of the events added to
	 *                                NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE EndEvent(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('EndEvent');

		END;
		/* Here you update the event table to ensure that this event is not processed again. */

		/* For example */
--		DELETE FROM  Database.<MySchemaName>.<MyEventTableName>
--				WHERE <MyEventTableName>.<MyEventTablePrimaryKey> = DispatchedEvent.Usr.<MyEventTablePrimaryKey>;

		/* Optionally, if your event table has a column to store state, you can update the events here. */
        UPDATE Database.admsalud.LABHSP_ADT
				SET MSH_STATUS = 'P'
				WHERE LABHSP_ADT.PV1_VISITNR = DispatchedEvent.Usr.PV1_VISITNR AND LABHSP_ADT.FEC_EVENTO = DispatchedEvent.Usr.FEC_EVENTO AND LABHSP_ADT.MSH_LAB_ID = DispatchedEvent.Usr.MSH_LAB_ID;
        		
		RETURN;
	END;


	CREATE PROCEDURE HandleDatabaseError( IN FunctionName CHARACTER )
	BEGIN
		/* Throw a different exception; this could be changed. */
		DECLARE message CHARACTER 'Exception occured calling Database Input Node function: ' || FunctionName;
		THROW USER EXCEPTION VALUES( SQLCODE, SQLSTATE, SQLNATIVEERROR, SQLERRORTEXT, message );
	END;

END MODULE;

/*
 * This DatabaseEvent module implements the ESQL code invoked from a DatabaseInput node to handle
 * events as they move through the states of New->Ready->Dispatched->Complete.
 *
 * NOTE: Events that result in unhandled exceptions in the message flow are moved to the Failed
 * state. "Unhandled" means either that the catch terminal was not wired, or that the catch
 * terminal threw an exception.  If an exception is unhandled, the transaction is rolled back.
 * If the exception is handled, even if it is handled on the catch terminal, the transaction is
 * committed.
 *
 * Events are moved to the Failed state after rollback (or after a number of retries, depending 
 * on the settings on the Retry panel).  Events in the Failed state are propagated to the Failure
 * terminal.  If they are not handled on the failure terminal, they are discarded.  They are
 * still in the EventTable, and so are not lost.
 *
 * If you are using a database table as your event store, you can convert this template to deployable
 * code by replacing the substitution strings. Substitution strings in this module are enclosed by
 * < and > characters.
 * The following substitution strings are used:
 *   <MySchemaName>                 - the database schema name.
 *   <MyEventTableName>             - the database table used as your event store.
 *   <MyEventTablePrimaryKey>       - the primary key of the database table used as the event store.
 *   <MyStatusColumnName>           - the name of a column, if you update a column in the event table
 *                                    to indicate that the event has been processed.
 *                                    If you delete events from the event table after processing, you
 *                                    do not need <MyStatusColumnName>.
 *   <MyNewEventStatusValue>        - the value written to the status column when the event is first
 *                                    added. You need this only if you use <MyStatusColumnName>.
 *   <MyProcessedEventStatusValue>  - the value written to the status column after the event has been
 *                                    processed. You need this only if you use <MyStatusColumnName>.
 *   <MyApplicationTableName>       - the name of the table that includes the changed data to be processed
 *                                    by the DatabaseInput node.
 *   <MyEventTableForeignKey>       - the column in the event table that references the row in the application
 *                                    table containing the changed data to be processed by the DatabaseInput
 *                                    node. This is typically the primary key of the application table.
 *   <MyApplicationTablePrimaryKey> - the primary key of the database table used as the application table.
 * When you have finished editing the ESQL, set the data source and ESQL module properties on the basic tab
 * of this node.
 */
CREATE DATABASEEVENT MODULE ORM_IN_Database_TABADMAMBLABCORE

	/*
	 * ReadEvents populates the NewEvents structure with event data read from the event table.
	 * ReadEvents is called after all current events have been dispatched.
	 * ReadEvents is called on a new transaction that is a separate transaction from the message
	 * flow, and that runs before the message flow transaction.
	 *
	 * After ReadEvents completes:
	 * - the current transaction is committed to ensure that any database locks obtained during
	 *   ReadEvents are released.
	 * - All events in NewEvents are moved to Ready state.  This means that they are ready to be
	 *   dispatched.
	 *
	 * Parameters:
	 * IN NewEvents REFERENCE.  This is a reference to a ROW. ReadEvents must create children of
	 *                          this ROW for each event that is being processed.
	 *                          Each child must include a Usr field and a Key field.
	 */
	 CREATE PROCEDURE ReadEvents( IN NewEvents REFERENCE )
	 BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('ReadEvents');
		END;

		/*
		 * Here you select all unprocessed events from the event store.
		 * You only read the events here; you delete them in EndEvent.
		 * In general, it is not good practice to delete or update the events here because this
		 * transaction will be committed even before the BuildMessage procedure is called.
		 * Under certain circumstances, for example, if you do not need assured delivery of the
		 * events, it is acceptable to update or delete the events here. This means that
		 * the deletion or update is committed before the message flow processes the in-memory
		 * copies of these events. If the broker, execution group, or message flow is stopped
		 * or redeployed in the meantime, the in-memory copy is lost, and the events are never
		 * processed by the flow.
		 *
		 * NOTE: You do not need to filter out events that are currently dispatched here.
		 *       The framework ensures that events are not duplicated by comparing the Key field
		 *       to the Key field of dispatched events.
		 */

		/* For example*/
--		SET NewEvents.Event[] = SELECT <MyEventTableName>.* AS Usr,
--									<MyEventTableName>.<MyEventTablePrimaryKey> AS Key
--									FROM Database.<MySchemaName>.<MyEventTableName>;

		/*
		 * Optionally, if your event table has a column to store state (events are not removed from
		 * the table after processing), use the WHERE clause to filter the events.
		 */
			SET NewEvents.Event[] = SELECT TABADMAMBLABCORE.* AS Usr,
									TABADMAMBLABCORE.PV1_VISITNR AS Key
	  								FROM Database.admsalud.TABADMAMBLABCORE
  									WHERE TABADMAMBLABCORE.estado = 'N' AND NOT(TABADMAMBLABCORE.PV1_VISITNR LIKE 'OA%');
	END;


	/*
	 * BuildMessage builds the message to be propagated to the flow.
	 * Typically, you use the event data for the current dispatched event to look up data in
	 * the application table, and copy that data into the message.
	 * BuildMessage is called while some events are in the Ready state.
	 * BuildMessage is called as part of the message flow transaction. This transaction also
	 * involves EndEvent.
	 *
	 * After BuildMessage returns, the message is propagated to the message flow.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the
	 *                                current dispatched event. This is a copy of one of the 
	 *                                events added to NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE BuildMessage(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('BuildMessage');
		END;
		/* Here you use the event data in the local environment to retrieve the application data. */

		/* For example */
		SET Root.DataObject.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Encoding = 'iso-8859-1';
		SET Root.DataObject.ns23:ORM_IN [] =
				SELECT TABADMAMBLABCORE.ESTADO as ESTADO, 
				TABADMAMBLABCORE.TIPO_REGISTRO as TIPO_REGISTRO, 
				TABADMAMBLABCORE.FEC_EVENTO as FEC_EVENTO,
				TABADMAMBLABCORE.PAC_PAC_RUT as PAC_PAC_RUT, 
				TABADMAMBLABCORE.PAC_PAC_TIPOIDENT as PAC_PAC_TIPOIDENT, 
				TRUNCATE (TABADMAMBLABCORE.PAC_PAC_NUMERO,0) as PAC_PAC_NUMERO,
				TRIM (TABADMAMBLABCORE.PAC_PAC_APELLPATER) as PAC_PAC_APELLPATER, 
				TRIM(TABADMAMBLABCORE.PAC_PAC_APELLMATER) as PAC_PAC_APELLMATER, 
				TRIM(TABADMAMBLABCORE.PAC_PAC_NOMBRE) as PAC_PAC_NOMBRE,
				TABADMAMBLABCORE.PAC_PAC_FECHANACIM as PAC_PAC_FECHANACIM, 
				TABADMAMBLABCORE.PAC_PAC_SEXO as PAC_PAC_SEXO, 
				TRIM(TABADMAMBLABCORE.PAC_PAC_DIRECCIONGRALHABIT) as PAC_PAC_DIRECCIONGRALHABIT,
				TABADMAMBLABCORE.PAC_PAC_REGIOHABIT as PAC_PAC_REGIOHABIT, 
				TABADMAMBLABCORE.PAC_PAC_FONO as PAC_PAC_FONO, 
				TABADMAMBLABCORE.PAC_PAC_ESTADCIVIL as PAC_PAC_ESTADCIVIL, 
				'CO' as PID_NATIONALITY, 
				'1900-01-01T00:00:00' as PID_DOD, 
				TABADMAMBLABCORE.PV1_STATUS as PV1_STATUS,  
				TABADMAMBLABCORE.PV1_LOCATION as PV1_LOCATION, 
				' ' AS PV1_ROOM, 
				' ' AS PV1_BED, 
				TABADMAMBLABCORE.PV1_ADMTYPE as PV1_ADMTYPE, 
				TABADMAMBLABCORE.XSER_PRO_RUT as XSER_PRO_RUT,
				TABADMAMBLABCORE.PV1_VISITNR as PV1_VISITNR, 
				TABADMAMBLABCORE.PV1_ADMITDATE as PV1_ADMITDATE, 
				'19000101000000' AS PV1_DISCHARGEDATE, 
				TABADMAMBLABCORE.DIA_DIA_CODIGO as DIA_DIA_CODIGO, 
				TABADMAMBLABCORE.DIA_DIA_DESCRIPCIO as DIA_DIA_DESCRIPCIO,
				TABADMAMBLABCORE.SEGMENT_OBR as SEGMENT_OBR, 
				TABADMAMBLABCORE.SER_PRO_CUENTA as SER_PRO_CUENTA, 
				TABADMAMBLABCORE.DONURL as DONURL, 
				TABADMAMBLABCORE.FEC_NACIM as FEC_NACIM, 
				TABADMAMBLABCORE.CHKCON as CHKCON, 
				TABADMAMBLABCORE.CHECKED as CHECKED, 
				TABADMAMBLABCORE.CON_CON_CODIGO as CON_CON_CODIGO, 
				TABADMAMBLABCORE.CON_CON_DESCRIPCIO as CON_CON_DESCRIPCIO, 
				TABADMAMBLABCORE.XCODIGOCENTROATEN as XCODIGOCENTROATEN, 
				TABADMAMBLABCORE.SER_PRO_NOMBREFULL as SER_PRO_NOMBREFULL, 
				TABADMAMBLABCORE.IPORIGEN AS IPORIGEN,
				TABADMAMBLABCORE.TAB_TIPOIDENTGLOSA as TAB_TIPOIDENTGLOSA, 
				TABADMAMBLABCORE.HOST_ORIGEN as HOST_ORIGEN, 
				' ' AS SER_PRO_ATIENDEORDEN, 
				TABADMAMBLABCORE.USRCOD as RUT_ATIENDE, 
				TABADMAMBLABCORE.FEC_EVENTO as FEC_EVENTO, 
				TABADMAMBLABCORE.ORDERCONTROL as ORDERCONTROL, 
				TABADMAMBLABCORE.ORDERSTATUS as ORDERSTATUS/*, ' ' as ORDOBSERVACION*/
        		FROM Database.admsalud.TABADMAMBLABCORE
					WHERE TABADMAMBLABCORE.PV1_VISITNR = DispatchedEvent.Usr.PV1_VISITNR AND TABADMAMBLABCORE.FEC_EVENTO = DispatchedEvent.Usr.FEC_EVENTO;
				SET Root.DataObject.ns23:ORM_IN [1].APLDESTINO = 'LIS';		

		RETURN;
	END;


	/*
	 * EndEvent updates the event table to record the event as processed.
	 * EndEvent is called after the message flow has processed the event.
	 * EndEvent is called as part of the message flow transaction.  This transaction also involves
	 * BuildMessage. The transaction will be committed when this procedure ends.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the current
	 *                                dispatched event. This is a copy of one of the events added to
	 *                                NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE EndEvent(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('EndEvent');

		END;
		/* Here you update the event table to ensure that this event is not processed again. */

		/* For example */
--		DELETE FROM  Database.<MySchemaName>.<MyEventTableName>
--				WHERE <MyEventTableName>.<MyEventTablePrimaryKey> = DispatchedEvent.Usr.<MyEventTablePrimaryKey>;

		/* Optionally, if your event table has a column to store state, you can update the events here. */
	   UPDATE Database.admsalud.TABADMAMBLABCORE
				SET estado = 'P'
				WHERE TABADMAMBLABCORE.PV1_VISITNR = DispatchedEvent.Usr.PV1_VISITNR AND TABADMAMBLABCORE.FEC_EVENTO = DispatchedEvent.Usr.FEC_EVENTO;
				
		RETURN;
	END;


	CREATE PROCEDURE HandleDatabaseError( IN FunctionName CHARACTER )
	BEGIN
		/* Throw a different exception; this could be changed. */
		DECLARE message CHARACTER 'Exception occured calling Database Input Node function: ' || FunctionName;
		THROW USER EXCEPTION VALUES( SQLCODE, SQLSTATE, SQLNATIVEERROR, SQLERRORTEXT, message );
	END;

END MODULE;



